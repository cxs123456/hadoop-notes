## 1. jvm的运行参数
**jvm的参数类型分为三类：**  
1. 标准参数  
  - -help
  - -version
2. -X参数 （非标准参数）  
  - -Xint
  - -Xcomp
3. -XX参数（使用率较高）  
  - -XX:newSize
  - -XX:+UseSerialGC

-server与-client参数设置jvm的运行参数,64位操作系统只能设置server。

**-Xint、-Xcomp、-Xmixed**  
- 在解释模式(interpreted mode)下，-Xint标记会强制JVM执行所有的字节码，当然这会降低运行速度，通常低10倍或更多。
- -Xcomp参数与它（-Xint）正好相反，JVM在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。
  然而，很多应用在使用-Xcomp也会有一些性能损失，当然这比使用-Xint损失的少，原因是-xcomp没有让JVM启用JIT编译器的全部功能。
  JIT编译器可以对是否需要编译做判断，如果所有代码都进行编译的话，对于一些只执行一次的代码就没有意义了。
- -Xmixed是混合模式，将解释模式与编译模式进行混合使用，由jvm自己决定，这是jvm默认的模式，也是推荐使用的模式。

**-Xms与-Xmx分别是设置jvm的堆内存的初始值和最大值。**
	-Xmx2048m：等价于-XX:MaxHeapSize，设置JVM最大堆内存为2048M。
	-Xms512m：等价于-XX:InitialHeapSize，设置JVM初始堆内存为512M。

### 1.1 -XX参数
-XX参数 主要用于jvm的调优和debug操作，使用方式 -XX:<name>=<value>
**-XX参数的使用有2种方式，一种是boolean类型，一种是非boolean类型：**
- boolean类型
  - 格式：-XX:[+-]<name> 表示启用或禁用<name>属性
  - 如：-XX:+DisableExplicitGC 表示禁用手动调用gc操作，也就是说调用System.gc()无效
- 非boolean类型
  - 格式：-XX:<name>=<value>  表示<name>属性的值为<value>
  - 如：-XX:NewRatio=1 表示新生代和老年代的比值


### 1.2 查看正在运行的java进程(JVM)的参数 jinfo
``` shell
	# 1.查看所有的参数，用法：jinfo -flags <进程id>
	# 2.通过jps 或者  jps -l 查看java进程
	jps -lv
	jinfo -flags 6219
	
``` 
	
	
## 2. jvm的内存模型和查看堆命令使用

### 2.1 jdk1.7的堆内存模型
** 1.Young 年轻区（代）**
Young区被划分为3部分，Eden区和2个大小相同的Survivor区，Eden和Survivor默认比值为8比1。
Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用，在Eden区间变满的时候， 
GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到Tenured区间。

** 2.Tenured 老年代**
Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区。

** 3.Perm 永久区**
Perm代主要保存class,method,field对象，这部份的空间一般不会溢出，除非一次性加载了很多的类，可能会遇到java.lang.OutOfMemoryError : PermGen space 的错误。

### 2.2 jdk1.8的堆内存模型
jdk1.8的内存模型是由2部分组成，年轻代 + 年老代。在jdk1.8中变化最大的Perm区，用Metaspace（元数据空间）进行了替换。
> **注意：**
Metaspace所占用的内存空间不是在虚拟机内部，而是在本地内存空间中，这也是与1.7的永久代最大的区别所在。

### 2.3 jstat 命令进行查看堆内存使用情况
``` shell 
	# 1.查看class加载统计
	jstat -class 6219
	# 2.查看编译统计
	jstat -compiler 6219
	# 3.垃圾回收统计
	jstat -gc 6219
```

### 2.4 jmap 的使用以及内存溢出分析	
前面通过jstat可以对jvm堆的内存进行统计分析，而jmap可以获取到更加详细的内容，如：内存使用情况的汇总、对内存溢出的定位与分析。
``` shell
	# 1.查看内存使用情况
	jmap -heap 6219
	# 2.查看内存中对象数量及大小
	#查看所有对象，包括活跃以及非活跃的
	jmap -histo <pid> | more
	
	# 3.将内存使用情况dump到文件中 jmap -dump:format=b,file=dumpFileName <pid>
	jmap -dump:format=b,file=/tmp/dump.dat 6219
	
	# 4.通过jhat对dump文件进行分析 jhat -port <port> <file>
	jhat -port 9999 /tmp/dump.dat 
```

### 2.5 jstack 查看下jvm中的线程执行情况
有些时候我们需要查看下jvm中的线程执行情况，比如，发现服务器的CPU的负载突然增高了、出现了死锁、死循环等
``` shell
	# 用法：jstack <pid>
	jstack 2203

```

### 2.6 VisualVM工具的使用
在jdk的安装目录的bin目录下，找到jvisualvm.exe，双击打开即可。


## 3.Java的垃圾回收算法
	
**1.垃圾回收的常见算法，分为2类：**
	定义垃圾算法：引用计数法、可达性分析算法。
	回收垃圾算法：标记清除、标记压缩、复制算法。

**2.JVM中年轻代和老年代垃圾回收GC过程：**
1. 在GC开始的时候，对象只会存在于Eden区和名为"From"的Survivor区，Survivor区"To"是空的。
2. 紧接着进行GC，Eden区中所有存活的对象都会被复制到"To"，而在"From"区中，仍存活的对象会根据他们的年龄值来决定去向。
	年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到"To"区域。
3. 经过这次GC后，Eden区和From区已经被清空。这个时候，"From"和"To"会交换他们的角色，也就是新的"To"就是上次GC前的"From"，新的"From"就是上次GC前的"To"。
	不管怎样，都会保证名为To的Survivor区域是空的。
4. GC会一直重复这样的过程，直到"To"区被填满，"To"区被填满之后，会将所有对象移动到年老代中。


**3.分代算法**
分代算法其实就是这样的，根据回收对象的特点进行选择，在jvm中，年轻代适合使用复制算法，老年代适合使用标记清除或标记压缩算法。


## 4.垃圾收集器

**在jvm中，实现了多种垃圾收集器，包括：**  
	串行垃圾收集器、并行垃圾收集器、CMS（并发）垃圾收集器、G1垃圾收集器

### 4.1 串行垃圾收集器
串行垃圾收集器，是指使用单线程进行垃圾回收，垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停，等待垃圾回收的完成。这种现象称之为STW（Stop-The-World）。
对于交互性较强的应用而言，这种垃圾收集器是不能够接受的。
一般在Javaweb应用中是不会采用该收集器的。

``` shell
	# 设置垃圾回收为串行收集器
	-XX:+UseSerialGC
	
	# 示例：测试GC，将堆的初始和最大内存都设置为16M
	-XX:+UseSerialGC -XX:+PrintGCDetails -Xms16m -Xmx16m
```

### 4.2 并行垃圾收集器
并行垃圾收集器在串行垃圾收集器的基础之上做了改进，将单线程改为了多线程进行垃圾回收，这样可以缩短垃圾回收的时间。
并行垃圾收集器有2种：ParNew垃圾收集器、ParallelGC垃圾收集器

**1.ParNew垃圾收集器：**
ParNew垃圾收集器是工作在年轻代上的，只是将串行的垃圾收集器改为了并行。
通过-XX:+UseParNewGC参数设置年轻代使用ParNew回收器，老年代使用的依然是串行收集器。

**2.ParallelGC垃圾收集器：**
ParallelGC收集器工作机制和ParNewGC收集器一样，只是在此基础之上，新增了两个和系统吞吐量相关的参数，使得其使用起来更加的灵活和高效。

``` shell
	# 示例1：ParNew垃圾收集器
	-XX:+UseParNewGC -XX:+PrintGCDetails -Xms16m -Xmx16m
	
	# 示例2：ParallelGC垃圾收集器
	-XX:+UseParallelGC -XX:+UseParallelOldGC -XX:MaxGCPauseMillis=100 -XX:+PrintGCDetails -Xms16m -Xmx16m
```

### 4.3 CMS垃圾收集器
CMS全称 Concurrent Mark Sweep，是一款并发的、使用标记-清除算法的垃圾回收器。
该回收器是针对老年代垃圾回收的，通过参数-XX:+UseConcMarkSweepGC进行设置。

### 4.4 G1垃圾收集器
G1垃圾收集器是在jdk1.7中正式使用的全新的垃圾收集器，oracle官方计划在jdk9中将G1变成默认的垃圾收集器，以替代CMS。  

G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：  
1. 第一步，开启G1垃圾收集器
2. 第二步，设置堆的最大内存
3. 第三步，设置最大的停顿时间
G1中提供了三种模式垃圾回收模式，Young GC、Mixed GC 和 Full GC，在不同的条件下被触发。

**1.G1收集器相关参数：**
1. -XX:+UseG1GC
  - 使用 G1 垃圾收集器
2. -XX:MaxGCPauseMillis
  - 设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到），默认值是 200 毫秒。
3. -XX:G1HeapRegionSize=n
  - 设置的 G1 区域的大小。值是 2 的幂，范围是 1 MB 到 32 MB 之间。目标是根据最小的 Java 堆大小划分出约 2048 个区域。
  - 默认是堆内存的1/2000。
4. -XX:ParallelGCThreads=n
  - 设置 STW 工作线程数的值。将 n 的值设置为逻辑处理器的数量。n 的值与逻辑处理器的数量相同，最多为 8。
5. -XX:ConcGCThreads=n
  - 设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 1/4 左右。
6. -XX:InitiatingHeapOccupancyPercent=n
  - 设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。


## 5.Tomcat8优化

**对于tomcat的优化，主要是从2个方面：** 
	1. tomcat 自身的配置优化(server.xml)。
	2. tomcat 所运行的jvm虚拟机的调优。

### 5.1 tomcat的配置优化 (server.xml)
**1.禁用AJP连接**
在服务状态页面中可以看到，默认状态下会启用AJP服务，并且占用8009端口。
AJP（Apache JServer Protocol）
AJPv13协议是面向包的。WEB服务器和Servlet容器通过TCP连接来交互；为了节省SOCKET创建的昂贵代价，WEB服务器会尝试维护一个永久TCP连接到servlet容器，
并且在多个请求和响应周期过程会重用连接。

**2.tomcat的运行模式有3种：bio、nio、apr**，设置连接器
tomcat的运行模式有3种：
1. bio
	默认的模式,性能非常低下,没有经过任何优化处理和支持.
2. nio
	nio(new I/O)，是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。
	Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。
	它拥有比传统I/O操作(bio)更好的并发运行性能。
3. apr
	安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能.

推荐使用nio，不过，在tomcat8中有最新的nio2，速度更快，建议使用nio2.
设置nio2：
``` xml
	<Connector executor="tomcatThreadPool"  port="8080" protocol="org.apache.coyote.http11.Http11Nio2Protocol"
				   connectionTimeout="20000"
				   redirectPort="8443" />

```

**3.执行器（设置线程池）**
在tomcat中每一个用户请求都是一个线程，所以可以使用线程池提高性能。
修改server.xml文件：
``` xml
	<!--将注释打开-->
	<Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
			maxThreads="500" minSpareThreads="50" prestartminSpareThreads="true" maxQueueSize="100"/>
	<!--
	参数说明：
	maxThreads：最大并发数，默认设置 200，一般建议在 500 ~ 1000，根据硬件设施和业务来判断
	minSpareThreads：Tomcat 初始化时创建的线程数，默认设置 25
	prestartminSpareThreads： 在 Tomcat 初始化的时候就初始化 minSpareThreads 的参数值，如果不等于 true，minSpareThreads 的值就没啥效果了
	maxQueueSize，最大的等待队列数，超过则拒绝请求
	-->

	<!--在Connector中设置executor属性指向上面的执行器-->
	<Connector executor="tomcatThreadPool"  port="8080" protocol="HTTP/1.1"
				   connectionTimeout="20000"
				   redirectPort="8443" />

```

**4.使用Apache JMeter进行测试tomcat**

### 5.2 tomcat的jvm调优
*catalina.sh 中设置：**
``` shell
	# 示例：设置G1垃圾回收器，设置了最大停顿时间100毫秒，初始堆内存128m，最大堆内存1024m
	JAVA_OPTS="-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Xms128m -Xmx1024m -XX:+PrintGCDetails 
		-XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:../logs/gc.log"

```
	

## 6.JVM字节码
	
### 6.1 javap命令查看class文件的字节码内容
``` shell
	javap -v Test1.class > Test1.txt
```

类的字节码内容大致分为4个部分：
	第1部分：显示了生成这个class的java源文件、版本信息、生成时间等。
	第2部分：显示了该类中所涉及到常量池，共35个常量。
	第3部分：显示该类的构造器，编译器自动插入的。
	第4部分：显示了main方的信息。（这个是需要我们重点关注的）

### 6.2 解读方法字节码
``` java
	// 源码
	package cn.itcast.jvm;

	public class Test1 {

		public static void main(String[] args) {
			int a = 2;
			int b = 5;
			int c = b - a;
			System.out.println(c);
		}

	}
	
	// javap生成的字节码文件，只显示main方法内容
	
public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V  //方法描述，V表示该方法的放回值为void
    flags: ACC_PUBLIC, ACC_STATIC  // 方法修饰符，public、static的
    Code:
      // stack=2,操作栈的大小为2、locals=4，本地变量表大小，args_size=1, 参数的个数
      stack=2, locals=4, args_size=1 
         0: iconst_2  //将数字2值压入操作栈，位于栈的最上面
         1: istore_1  //从操作栈中弹出一个元素(数字2)，放入到本地变量表中，位于下标为1的位置（下标为0的是this）
         2: iconst_5  //将数字5值压入操作栈，位于栈的最上面
         3: istore_2  //从操作栈中弹出一个元素(5)，放入到本地变量表中，位于第下标为2个位置
         4: iload_2  //将本地变量表中下标为2的位置元素压入操作栈（5）
         5: iload_1  //将本地变量表中下标为1的位置元素压入操作栈（2）
         6: isub  //操作栈中的2个数字相减
         7: istore_3 // 将相减的结果压入到本地本地变量表中，位于下标为3的位置
         // 通过#2号找到对应的常量，即可找到对应的引用       
         8: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
        11: iload_3 //将本地变量表中下标为3的位置元素压入操作栈（3）
        // 通过#3号找到对应的常量，即可找到对应的引用，进行方法调用
        12: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V
        15: return //返回
      LineNumberTable:  //行号的列表
        line 6: 0
        line 7: 2
        line 8: 4
        line 9: 8
        line 10: 15
      LocalVariableTable: // 本地变量表
        Start  Length  Slot  Name   Signature
            0      16     0  args   [Ljava/lang/String;
            2      14     1     a   I
            4      12     2     b   I
            8       8     3     c   I
}
SourceFile: "Test1.java"
		
```

#### 根据pid查询 docker 容器 id
docker inspect -f "{{.Id}}"  $(docker ps -q) |grep <PID>
ps -ef|grep java|grep <PID>
#### 该进程内最耗费CPU的线程，将线程转成16进制，再jstack获取线程上下文
top -Hp pid
printf "%x\n" 21742  
jstack 1 | grep 'nid=0x9' -C5 --color
#### 查看每秒钟gc的情况
jstat -gcutil <PID> 1000 100 






