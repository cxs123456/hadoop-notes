## 1.ElasticSearch 介绍

	### 1.ELK是什么、ElasticSearch是什么、应用场景
	1) ELK是ElasticSearch、Logstash 和 Kibana 是三个软件产品的首字母缩写，全文检索框架首推Elasticsearch，是基于Lucene的框架
		E：ElasticSearch 全文检索的框架，基于lucene
		L：Logstash 日志数据收集采集框架。类似于flume
		K：Kibana 报表展示工具。类似于echarts
	2) Elaticsearch 简称为es，是一个分布式全文检索引擎，它可以近乎实时的存储、检索数据，目前百度使用ES作为搜索引擎。
	Lucene实现全文检索的流程：1.获得文档、2.构建文档对象、3.分析文档（抽取分词）、4.创建索引库。
	**应用场景：海量数据实时搜索服务**
	
	### 2.ElasticSearch架构和基本概念(术语)
	**ES架构从底层到上层：**
	  Gateway -> lucene ->(索引模块,搜索模块,映射解析模块)->(Discovery,Scripting,第三方插件)-> Transport -> RESTful style API
	
	**1.Elasticsearch与关系型数据库比对如下：**
	Relational DB -> Database -> Table -> Row -> Column
	Elasticsearch -> Index   -> Type  -> Document -> Field
	
	**2.ElasticSearch的核心概念：**
	  index：索引库，我们在es当中创建的一个个的索引库，类似于数据库。
	  type：类型，在索引库下面创建的类型，类似数据库的表。
	  document：文档，es当中一条数据就是一个document，代表1条记录。
	  field：字段，一条document数据是由多个字段组成的。
	  mapping：映射关系，映射field的字段的类型，字段的分词，索引，存储的特性。
	  setting：设置，设置索引库的分片数以及副本数，**分片数不能够更改，副本数可以更改。**
	  cluster：集群，es每一个节点叫做一个node，所有的node组织起来就变成了集群的概念。
	  node：每一个es节点都是一个node
	  shards & replicas：分片和复制(副本)

## 2.ElasticSearch 安装

	### 1.ElasticSearch 集群部署
	注意：ES不能使用root用户来启动，必须使用普通用户来安装启动。
	集群规划：3台主机都安装ES，修改配置文件，3个节点组成集群
	①创建一个es专门的用户，为普通用户es添加sudo权限
	```
	// 1.root用户下设置es以及密码，
	useradd es
	passwd es
	// 2.为普通用户es添加sudo权限 visudo
	es ALL=(ALL) ALL
	```
	②下载并解压ES的安装包
	tar -zxf elasticsearch-6.7.0.tar.gz -C /export/servers/es/
	③修改配置文件，使用es用户来修改
	```
	// 1.修改elasticsearch.yml(参考讲义，内容太多)
	// 2.修改jvm.option
	-Xms2g
	-Xmx2g
	```
	④将安装包分发到其他机器
	cd /export/servers/es/
	scp -r elasticsearch-6.7.0/ node02:$PWD
	scp -r elasticsearch-6.7.0/ node03:$PWD
	⑤node02与node03修改es配置文件(同上第3步)
	⑥修改系统配置，解决启动时候的问题
	```
	// 1.解决启动问题一：普通用户打开文件的最大数限制
	sudo vi /etc/security/limits.conf
	* soft nofile 65536
	* hard nofile 131072
	* soft nproc 2048
	* hard nproc 4096
	// 2.解决启动问题二：普通用户启动线程数限制
	sudo vi /etc/security/limits.d/90-nproc.conf
	* soft nproc 4096
	// 1.解决启动问题三：普通用户调大虚拟内存
	sudo  sysctl -w vm.max_map_count=262144
	```
	⑦启动ES服务
	```
	// 后台启动
	nohup /export/servers/es/elasticsearch-6.7.0/bin/elasticsearch 2>&1 &
	// 查看es使用jps
	```
	
	### 2.安装elasticsearch-head插件方便查看es的管理界面(不安装也没事，主要用于查看es的web界面管理数据)
	
	### 3.安装Kibana（参考讲义安装）
	Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。

	
## 3.ElasticSearch 使用

	### 1.使用Kibana操作ES管理索引(详细使用参考讲义)
	Kibana的web界面控制台中使用CURL方式请求ES：
	-X 指定http的请求方法 有HEAD GET POST PUT DELETE
	-d 指定要传输的数据
	-H 指定http请求头信息
	
	#### 1.1 入门操作使用**
	①创建索引、删除索引
	```
	// 1.创建blog01索引
	curl -XPUT http://node01:9200/blog01/?pretty
	// 2.删除blog01索引
	curl -XDELETE http://node01:9200/blog01?pretty
	```
	②文档操作
	```
	// 1.插入文档
	// 使用PUT添加一个文档到/article(文档类型)，并为该文档分配ID为1，URL路径显示为index/doctype/ID（索引/文档类型/ID）
	curl -XPUT http://node01:9200/blog01/article/1?pretty -d  '{"id": "1", "title": "What is lucene"}'
		-H "Content-Type: application/json"
	// 批量插入 _bulk
	POST /school/student/_bulk
	{ "index": { "_id": 1 }}
	{ "name" : "liubei", "age" : 20 , "sex": "boy", "birth": "1996-01-02" , "about": "i like diaocan he girl" }
	{ "index": { "_id": 2 }}
	{ "name" : "guanyu", "age" : 21 , "sex": "boy", "birth": "1995-01-02" , "about": "i like diaocan" }
	// 2.查询文档，根据id查询
	curl -XGET http://node01:9200/blog01/article/1?pretty
	// 3.更新文档和插入文档是一样的，ES中没用更新
	// 4.搜索文档  _search?q=title:elasticsearch
	curl -XGET "http://node01:9200/blog01/article/_search?q=title:elasticsearch" 
	// 5.删除文档，根据id删除
	curl -XDELETE "http://node01:9200/blog01/article/1?pretty"
	```
	
	#### 1.2 高级操作使用**
	**1.花式查询：**
	```
	// 查询url：GET index/doctype/_search?pretty
	// 查询的json数据：{ "query": {// 定义查询} }
	// 1.使用match_all做查询："match_all": {}
	// 2. match关键字段进行查询："match": {"about": "travel"}，match不能出现多个字段值
	// 3. bool的复合查询 (must、，must_not、should)
	// 当出现多个查询语句组合的时候，可以用bool来包含。bool合并聚包含：must，must_not或者should，should表示or的意思
	// 例子1：查询非男性中喜欢旅行的人
	"bool": {
      "must": { "match": {"about": "travel"}},
      "must_not": {"match": {"sex": "boy"}}
     }
	// 例子2：查询喜欢旅行的，如果有男性的则显示，否则不显示
	"bool": {
      "must": { "match": {"about": "travel"}},
      "should": {"match": {"sex": "boy"}}         
     }
	// 4. term匹配，使用term进行精确匹配
	"term": { "age": 20 }
	// 使用terms匹配多个值 类似sql的in
	"terms": {"about": ["travel","history"]
	// 5. range过滤 
	// 允许我们按照指定的范围查找，操作范围：gt大于、gae大于等于、lt小于、lte小于等于
	// 例子：查找出大于20岁，小于等于25岁的学生
	"range": {"age": {"gt":20,"lte":25}}
	// 6. exists和 missing过滤
	// 找到文档中是否包含某个字段或者是没有某个字段
	"exists": {"field": "age"  }
	// 7. 查询与过滤条件合并 filter语句
    //例子：查询出喜欢旅行的，并且年龄是20岁的文档
	"bool": {
     "must": {"match": {"about": "travel"}},     
     "filter": [{"term":{"age": 20}}]
     }
	```
	
	**2.索引的映射管理（ mapping ）：**
	目的：指定索引库类型下的字段类型。
	url：PUT 索引名称
	json数据：
	{"mappings": {
		"表名或类型名" : {
		  "properties": {"字段名" : {"type": "text"}}
		}
	  }
	}
	
	```
	// 1.创建索引映射
	//例子：添加索引：school，文档类型类logs，索引字段为message ，字段的类型为text
	DELETE school
	PUT school
	{
	  "mappings": {
		"logs" : {
		  "properties": {"messages" : {"type": "text"}}
		}
	  }
	}
	// 注意:字段的mapping建立后就不可再次修改mapping的值
	// 2.查询索引映射
	GET /school/_mapping/logs
	// 3.继续添加字段映射
	POST /school/_mapping/logs
	{"properties": {"number" : {"type": "text"}}}
	// 4.获取映射字段
	GET /{index}/_mapping/{type}/field/{field}
	```
	**当需要修改索引库某个字段的类型时：只能重新创建一个索引库，并拷贝索引库数据***
	
	**3.索引的配置管理（ setting ）：**
	目的：修改索引库分片和副本数
	例子：把副本数改成2。
	PUT /索引名称/_settings
	{"number_of_replicas": 2}
	**注意：**副本可以改，分片不能改
	
	**4.ElasticSearch 的分页方案 **
	方案1：size+from 浅分页
	  这种浅分页只适合少量数据，因为随from增大，查询的时间就会越大，而且数据量越大，查询的效率指数下降
	方案2：scroll 深分页
	  深分页，可以一次性将所有满足查询条件的数据，都放到内存中，分页的时候，在内存中查询。相对浅分页，就可以避免多次读取磁盘。
	  
	**IK分词器：解决对中文的分词问题**
	** 4.分片交互过程 **
	确定shard：shard = hash(routing) % numberofprimary_shards  routing一般是_id字段值
	
	### 2.ElasticSearch 的Java API操作
	**开发大致过程：**
	pom文件引入ElasticSearch的transport依赖
	①创建client对象(TransportClient)，通过PreBuiltTransportClient和Settings对象，最后关闭client.close()
	②创建索引并插入文档，client.prepareIndex("myindex1", "article", "1").setSource(json, XContentType.JSON).get()
	③批量插入文档client.prepareBulk()
	④更新索引文档client.prepareUpdate()
	⑤删除索引文档 client.prepareDelete()，按照id进行删除
	⑥删除索引库client.admin().indices().prepareDelete
	⑦查询索引文档(参考讲义和工程代码)
	// 通过id来进行精确查询
	client.prepareGet("indexsearch", "mysearch", "11").get();
	// RangeQuery查询
	setQuery(new RangeQueryBuilder("age").gt(17).lt(29))
	// termQuery词条查询
	setQuery(new TermQueryBuilder("say", "熟悉"))
	// fuzzyQuery模糊查询
	setQuery(QueryBuilders.fuzzyQuery("say", "helOL").fuzziness(Fuzziness.TWO))
	// wildCardQuery通配符查询
	setQuery(QueryBuilders.wildcardQuery("say", "hel*"))
	// boolQuery 多条件组合查询 QueryBuilders.boolQuery()
	setQuery(QueryBuilders.boolQuery().should(id).should(QueryBuilders.boolQuery().must(sex).must(age)))
	⑧分页与高亮查询
	// 分页查询
	.addSort("id",SortOrder.ASC)
	.setFrom(startNum)
	.setSize(pageSize)
	// 高亮查询
	.highlighter(HighlightBuilder)
	
	**ES的java操作高级API **
	需求一：统计每个球队当中球员的数量
		SQL：select team, count(*) as player_count from player group by team;
		// 指定聚合条件
		TermsAggregationBuilder team = AggregationBuilders.terms("player_count").field("team");
		// 将聚合条件放入查询条件中
		builder.addAggregation(team);
	需求二：统计每个球队中每个位置的球员数量
		SQL：select team, position, count(*) as pos_count from player group by team, position;
		// 添加多个聚合操作
		builder.addAggregation(team).addAggregation(position)
	需求三：分组求各种值 AggregationBuilders
		// 1.计算每个球队年龄最大值
		SQL：select team, max(age) as max_age from player group by team;
		// 指定聚合
		TermsAggregationBuilder team = AggregationBuilders.terms("team_group").field("team");
		// 指定子聚合
		MaxAggregationBuilder age = AggregationBuilders.max("max_age").field("age");
		team.subAggregation(age);
		builder.addAggregation(team)
		// 2.统计每个球队年龄最小值
		team.subAggregation(age);
		builder.addAggregation(team)
		// 3.平均值/最大值/最小值/求和
		team.subAggregation(min).subAggregation(avg).subAggregation(max).subAggregation(sum);
		builder.addAggregation(team)
	需求：聚合排序
		// 计算每个球队总年薪，并按照年薪进行排序
		SQL：select team, sum(salary) as total_salary from player group by team order by total_salary desc;
		AggregationBuilders.terms("team_group").field("team").order(BucketOrder.count(true));

	### 3.ElasticSearch 的SQL API操作
	第1种方式：通过rest风格实现数据的查询
		curl -X POST "node01:9200/_xpack/sql?format=txt" -H 'Content-Type: application/json' -d'
		{
			"query": "SELECT * FROM library WHERE release_date < \u00272000-01-01\u0027"
		}'
	第2种方式：使用sql脚本的方式进入sql客户端进行查询
		bin/elasticsearch-sql-cli node01:9200
		sql> select * from library;

	第3种方式：通过JAVA jdbc连接的方式
		pom文件引入org.elasticsearch.plugin的x-pack-sql-jdbc依赖
		类似jdbc的开发
		
	### 4.ElasticSearch整合HBase实现二级索引
	**需求：解决海量数据的存储，并且能够实现海量数据的秒级查询.**
	实际生产中，一遍文章要分成标题和正文；但是正文的量是比较大的，那么我们一般会在es中存储标题，
	在hbase 中存储正文（hbase本身就是做海量数据的存储）；这样通过es的倒排索引列表检索到关键词的
	文档id，然后根据文档id在hbase中查询出具体的正文。
	
	
## 4.LogStash介绍、安装、使用

	### 1.LogStash是什么、应用场景
	logstash就是一个具备实时数据传输能力的管道，负责将数据信息从管道的输入端传输到管道的输出端；
	与此同时这根管道还可以让你根据自己的需求在中间加上滤网，Logstash提供里很多功能强大的滤网以满足你的各种应用场景。
	是一个input | filter | output 的数据流。
	****日志数据采集工具****
	应用场景：日志的采集、聚合和传输

	**logstash主要有三个组件：**
        input plugins：主要是用于定义从哪些地方可以采集数据  。类似于flume当中source组件
        output plugin：主要是定义将采集好的数据保存到哪里去 。类似于flume当中的sink组件
        filter plugin：主要是对采集的数据做加工和格式转换的等一些工作。类似于flume当中的拦截器interceptor

	## 2.LogStash 安装(参考讲义)
	## 3.LogStash 使用(详细参考讲义)
	学会编写LogStash 的配置文件，语法类似json，但不是json
	配置文件参数说明(参考讲义)
	配置文件名称随意
	// 启动logstash
	bin/logstash -f /export/servers/es/logstash-6.7.0/config/monitor_file.conf
	## 4.logStash+ES综合案例(详细参考讲义)
	1、采集服务器运行产生的日志
	2、采集nginx日志到es当中















