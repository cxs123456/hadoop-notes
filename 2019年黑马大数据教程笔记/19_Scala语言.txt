## 1. 变量、数据类型、字符串、表达式、循环

	### 1.1 变量声明
	在scala中，可以使用 val 或者 var 来定义变量， 语法格式如下:
	```
	val/var 变量命:变量类型 = 初始值
	// 例子：
	val name:String = "tom"
	```

	### 1.2 数据类型
	基础类型:Byte、Short、Int、Long、Float、Double、Char、Boolean
	#### scala类型层次结构
	| 类型    | 说明                                                         |
	| ------- | ------------------------------------------------------------ |
	| Any     | **所有类型**的父类，它有两个子类AnyRef与AnyVal              |
	| AnyVal  | **所有数值类型**的父类                                       |
	| AnyRef  | **所有对象类型（引用类型）**的父类                               |
	| Unit    | 表示空，Unit是AnyVal的子类，它只有一个的实例**()**,它类似于Java中的void，但scala要比Java更加面向对象 |
	| Null    | Null是AnyRef的子类，所有引用类型的子类。它的实例是**null**,可以将null赋值给任何对象类型 |
	| Nothing | **所有类型的子类**，不能直接创建该类型实例，某个方法抛出异常时，返回的就是Nothing类型，那么它可以赋值为任何类型 |

	> **注意：**
	scala中所有的类型都使用大写字母开头。
	scala中没有++、 --运算符。
	scala中，可以直接使用 == 、 != 进行比较，它们与 equals 方法表示一致。比较两个对象的引用值，使用 eq

	### 1.3 字符串
	scala中定义字符串的方式：
	``` scala
	// 1.使用双引号
	val/var 变量名 = "字符串"
	// 2.使用插值表达式
	val/var 变量名 = s"${变量/表达式}字符串"
	// 3.使用三引号
	val/var 变量名 = """字符串1
	字符串2"""
	```

	### 1.3 表达式
	**条件表达式 if：**
	if表达式，scala条件表达式的语法和Java一样，但在scala中，条件表达式也是有返回值的，可以使用if表达式替代三元表达式。
	**块表达式 {}：**
	scala中，使用{}表示一个块表达式，也是有返回值的，值就是最后一个表达式的值

	### 1.4 循环
	**scala中while循环与java一致，主要讲for循环**
	for循环语法：
	``` scala
	// []可选，表示if守卫
	for(i <- 表达式/数组/集合 [if 表达式]) {
	// 表达式
	}

	// 例子1：打印3行，5列星星
	for(i <- 1 to 3; j <- 1 to 5) {print("*");if(j == 5) println("")}
	// 例子2：添加守卫， 打印能够整除3的数字
	for(i <- 1 to 10 if i % 3 == 0) println(i)

	// for推导式： for表达式中以yield开始， 该for表达式会构建出一个集合
	val v = for(i <- 1 to 10) yield i * 10
	```


## 2. 方法、函数

	### 2.1 方法
	**定义方法语法：**
	``` scala
	// [表示可选]
	def methodName (参数名:参数类型[= 默认值], 参数名:参数类型[*]) : [return type] = {
		// 方法体：一系列的代码
	}
	```
	**方法参数**
	scala中的方法参数，支持3种类型的参数：
	1. 默认参数，可以定义默认值，调用时无实参则使用默认值
	2. 带名参数，调用时可指定参数名传实参
	3. 不定长参数，java中使用3个点，scala中使用*

	**方法调用**
	在scala中，有以下4种方法调用方式：
	1. 后缀调用法，方法名(参数)
	2. 中缀调用法，方法名 参数
	3. 花括号调用法，方法名{表达式},注意：方法只有1个参数，才能使用花括号调用法
	4. 无括号调用法，方法名，方法没有参数，可以省略方法名后面的括号
	> **注意：**
	所有的操作符都是方法，操作符是一个方法名字，比如：1 + 1 。
	定义递归方法时，不能省略返回值。

	### 2.2 函数
	scala支持函数式编程，类似Java中的 Lambda 表达式，将来编写Spark/Flink程序中，会大量经常使用到函数。
	**定义函数语法：**
	``` scala
	val 函数变量名 = (参数名:参数类型, 参数名:参数类型....) => 函数体

	// 示例：
	scala> val add = (x:Int, y:Int) => x + y
	add: (Int, Int) => Int = <function2>
	scala> add(1,2)
	res3: Int = 3
	```
	> **注意：**
	函数是一个对象(变量)。
	无需指定返回值类型。

	**函数和方法的区别**
	- 1.内存位置不同，方法是隶属于类或者对象的，在运行时，它是加载到JVM的方法区中。
	- 2.函数是对象，可以将函数对象赋值给一个变量，在运行时，它是加载到JVM的堆内存中。
	- 函数是一个对象，继承自FunctionN， 函数对象有apply， curried， toString， tupled这些方法。
	**将方法转换为函数**
	在方法名后面使用 _ 即可将方法转换为函数，例如： `val a = add _`


## 3.数组、元组、列表、集合Set、映射Map、函数式编程

	### 3.1 数组
	scala中数组的概念是和Java类似，可以用数组来存放一组数据。scala中，有两种数组，定长数组和变长数组
	``` scala
	/**1.定长数组**/
	// 通过指定长度定义数组
	val/var 变量名 = new Array[元素类型](数组长度)
	// 用元素直接初始化数组
	val/var 变量名 = Array(元素1, 元素2, 元素3...)

	/**2.变长数组**/
	val/var a = ArrayBuffer[元素类型]()
	val/var a = ArrayBuffer(元素1， 元素2， 元素3....)

	// 添加/修改/删除元素
	// 使用 += 添加元素
	// 使用 -= 删除元素
	// 使用 ++= 追加一个数组到变长数组
	val a = ArrayBuffer("hadoop", "spark", "flink")
	a += "flume"
	a -= "hadoop"
	a ++= Array("hive", "sqoop")
	// 数组常用方法 sum max min sorted
	```

	### 3.2 元组
	**元组可以用来包含一组不同类型的值。 例如： 姓名， 年龄， 性别， 出生年月。 元组的元素是不可变的。 **
	``` scala
	// 使用括号来定义元组
	val/var 元组 = (元素1, 元素2, 元素3....)
	// 使用尽头来定义元素（ 元组只有两个元素 ）
	val/var 元组 = 元素1->元素2

	// 使用 _ 访问元素
	val a = (1, "张三", 20, "北京市")
	a._1
	```

	### 3.3 列表
	在scala中，也有两种列表，不可变列表和可变列表。
	不可变列表就是列表的元素、 长度都是不可变的，可变列表则相反。
	``` scala
	/**1.不可变列表**/
	val/var 变量名 = List(元素1, 元素2, 元素3...)
	// 使用 Nil 创建一个不可变的空列表
	val/var 变量名 = Nil
	// 使用 :: 方法创建一个不可变列表
	val/var 变量名 = 元素1 :: 元素2 :: Nil

	/**2.可变列表**/
	val/var 变量名 = ListBuffer[Int]()
	val/var 变量名 = ListBuffer(元素1， 元素2， 元素3...)

	/**列表常用操作**/
	// 判断列表是否为空（isEmpty ）
	// 拼接两个列表（++ ）
	// 获取列表的首个元素（head ） 和剩余部分( tail )
	// 反转列表（reverse ）
	// 获取前缀（take ） 、 获取后缀（drop ）
	// 扁平化（flaten ）
	// 拉链（zip ） 和拉开（unzip ）
	// 转换字符串（toString ）
	// 生成字符串（mkString ）
	// 并集（union ）
	// 交集（intersect ）
	// 差集（diff ）

	```

	### 3.4 集合Set
	Set(集合)是代表元素不重复，不保证插入顺序的集合。
	scala中的集也分为两种， 不可变集和可变集
	``` scala
	// 可以变集和不可集都是类名Set，当时包不一样，mutable和immutable包
	val/var 变量名 = Set[类型]()
	val/var 变量名 = Set[类型](元素1, 元素2, 元素3...)
	```

	### 3.5 映射Map
	在scala中， Map也分为不可变Map和可变Map。
	``` scala
	// 可以变集和不可集都是类名Map，当时包不一样，mutable和immutable包
	val/var map = Map(键->值, 键->值, 键->值...) // 推荐， 可读性更好
	val/var map = Map((键, 值), (键, 值), (键, 值), (键, 值)...)
	// Map基本操作
	获取值( map(key) )
	获取所有key（map.keys ）
	获取所有value（map.values ）
	遍历map集合 for((x,y) <- map) 
	getOrElse
	增加key,value对: map + "wangwu"->35
	删除key:  map - "lisi"
	```

	### 3.6 函数式编程
	我们将来使用Spark/Flink的大量业务代码都会使用到函数式编程。下面的这些操作是学习的重点。

		遍历（foreach ）
		映射（map ）
		映射扁平化（flatmap ）
		过滤（filter ）
		是否存在（exists ）
		排序（sorted 、 sortBy 、 sortWith ）
		分组（groupBy ）
		聚合计算（reduce ）
		折叠（fold ）


## 4 scala面向对象(类、继承、特质trait)

	### 4.1 类class
	scala是支持面向对象的，也有类和对象的概念。
	**1. 创建类和对象 **
	- 使用class关键字来定义类
	- 使用var/val来定义成员变量
	- 使用def来定义成员方法
	- 使用new来创建一个实例对象
	``` scala
	/**1.创建类**/
	class Customer {
	  var name:String = _
	  var sex:String = _
	  val registerDate:Date = new Date

	  def sayHi(msg:String) = {
		println(msg)
	  }
	}
	object Main {
	  def main(args: Array[String]): Unit = {
		val customer = new Customer
		customer.name = "张三"
		customer.sex = "男"
	  }
	}

	/**2.类的构造器**/
	// 示例1：定义主构造器
	class 类名(var/val 参数名:类型 = 默认值, var/val 参数名:类型 = 默认值){
		// 构造代码块
	}
	// 示例2：辅助构造器
	def this(参数名:类型, 参数名:类型) {
		...
	}
	// 在主构造器中，可以直接定义成员变量
	class Student(val name:String, val age:Int)
	```

	> **注意：**
	1.类中var类型的成员变量，可以使用 _ 表示使用默认值进行初始化。
	2.val变量不能使用_来进行初始化，因为val是不可变的，所以必须手动指定一个默认值。
	3.main方法必须要放在一个scala的object（单例对象）中才能执行。
	4.使用jd-gui工具反编译Customer类反编译scala编译出来的class文件成java，查看内容。

	**问题1：**
	是否能够生成类似于Java的getter/setter方法呢？答：可以，在字段上加上@BeanProperty就可以了。

	**2. 单例对象和伴生对象 object **
	scala要比Java更加面向对象，所以，scala中是没有Java中的静态成员的。
	如果将来我们需要用到static变量、static方法，就要用到scala中的单例对象——object。
	可以把object理解为全是包含静态字段、静态方法的class，object本质上也是一个class。
	``` scala
	// 定义object
	object 类名 {
	}
	```
	**伴生对象**
	在Java中，经常会有一些类，同时有实例成员又有静态成员。在scala中使用伴生类。
	**一个class和object具有同样的名字。这个object称为伴生对象，这个class称为伴生类。**
	**实现伴生对象的apply方法，可以直接通过类名创建对象，省略new关键字 **

	### 4.2 继承
	Scala和Java一样，使用extends关键字来实现继承。可以在子类中定义父类中没有的字段和方法，或者重写父类的方法。
	**1. override 和 super **
	- 如果子类要覆盖父类中的一个非抽象方法，必须要使用override关键字
	- 可以使用override关键字来重写一个val字段
	- 可以使用super关键字来访问父类的成员

	**2. isInstanceOf、asInstanceOf、getClass和classOf **
	在Java中，我们可以使用instanceof关键字，在scala中如何实现呢？
	scala中对象提供isInstanceOf和asInstanceOf方法。
	- isInstanceOf 判断对象是否为指定类的对象。 if(s1.isInstanceOf[Student3])
	- asInstanceOf 将对象转换为指定类型。 val s2 = s1.asInstanceOf[Student3]
	- getClass和classOf 可以精确地判断出对象就是指定类的对象。p.getClass == classOf[Person4]

	**3. 访问修饰符 **
	Java中的访问控制，同样适用于scala，可以在成员前面添加private/protected关键字来控制成员的可见性。
	但在scala中，没有public关键字，任何没有被标为private或protected的成员都是公共的。

	**4. 抽象类 **
	定义抽象类和Java一样，在类前面加上abstract关键字就可以了。
	**5. 匿名内部类 **
	匿名内部类是没有名称的子类，直接用来创建实例对象，和java创建匿名内部类一样。

	### 4.3 特质(trait)
	**可以将Scala中的特质(trait)理解为Java中的接口interface，但是trait中还可以定义具体的方法**
	**1. 作为接口使用 **
	1. 使用extends来继承trait
	2. 如果要继承多个trait，则使用with关键字
	``` scala
	/**1.定义特质**/
	trait 名称 {
		// 抽象字段
		// 抽象方法
	}
	/**2.继承特质**/
	// [可选]
	class 类 extends 特质1 with 特质2 [with 特质3]{
		// 字段实现
		// 方法实现
	}
	```
	> **注意：**
	① trait中可以定义具体字段和抽象字段，继承trait的子类自动拥有trait中定义的字段。
	② trait也有构造代码，但和类不一样，特质不能有构造器参数，每个特质只有一个无参数的构造器。
	③ trait也可以继承class。
	④ 一个类继承另一个类、以及多个trait，当创建该类的实例时，它的构造顺序如下：
		1. 执行父类的构造器
		2. 从左到右依次执行trait的构造器
		3. 如果trait有父trait，先构造父trait，如果多个trait有同样的父trait，则只初始化一次
		4. 执行子类构造器

	**2.实例对象混入 trait **
	trait还可以混入到实例对象中，给对象实例添加额外的行为，使用with将trait混入到实例对象中。
	语法：`val/var 对象名 = new 类 with 特质`

	> **注意：trait调用链 **
	类中调用多个tait中同名方法时，首先会从最右边的trait方法开始执行，然后依次往左执行，形成一个调用链条。


## 5 scala高级用法

- 掌握样例类、模式匹配、Option类型、偏函数、正则表达式、异常处理的使用
- 理解泛型(和java一样，定义位置不一样)、类型转换(协变+T,逆变-T，非变(泛型默认非变，不能转换))
- 掌握Actor并发编程模型(多线程)，基于事件模型的并发机制

	### 5.1 样例类 case class
	样例类是一种特殊类，用于保存数据的实体类（类似于Java POJO类），而且它会自动生成apply方法，允许我们快速地创建样例类实例对象。
	**语法：** `case class 样例类名(成员变量名1:类型1, 成员变量名2:类型2, 成员变量名3:类型3)`
	> **注意：**
	1.样例类可以使用类名(参数1, 参数2...)快速创建实例对象。
	2.定义样例类成员变量时，可以指定var类型，表示可变。默认是不可变的。
	3.样例类自动生成了toString、equals、hashCode、copy方法。
	4.样例对象没有主构造器，可以使用样例对象来创建枚举、或者标识一类没有任何数据的消息。
	5.使用case object可以创建样例对象，样例对象是单例的，而且它没有主构造器。

	### 5.2 模式匹配 match case
	在Java中，有switch关键字，可以简化if条件判断语句。在scala中，可以使用match表达式替代。
	语法结构：

		变量 match {
			case "常量1" => 表达式1
			case "常量2" => 表达式2
			case "常量3" => 表达式3
			case _ => 表达式4		// 默认匹配
		}

	> **注意：模式匹配中case可以添加**
	守卫：case a1 if 条件 => 表达式
	匹配类型：case 变量名: 类型1 => 表达式1
	Extractor提取器

	### 5.3 Option类型
	和Java一样在scala中也有Option类型来表示可选值。这种类型的数据有两种形式：
	- Some(x)：表示实际的值
	- None：表示没有值

	### 5.4 偏函数（1个参数和1个返回值的函数）
	偏函数：被包在花括号内没有match的一组case语句，它是PartialFunction[A, B]的一个实例，A代表输入参数类型，B代表返回结果类型。
	可以理解为：偏函数是1个参数和1个返回值的函数。
	``` scala
		// func1是一个输入参数为Int类型，返回值为String类型的偏函数
		val func1: PartialFunction[Int, String] = {
			case 1 => "一"
			case 2 => "二"
			case 3 => "三"
			case _ => "其他"
		}
	```

	### 5.5 正则表达式
	scala中提供了Regex类来定义正则表达式，要构造一个RegEx对象，直接使用String类的r方法即可。
	建议使用三个双引号来表示正则表达式，不然就得对正则中的反斜杠来进行转义。
	``` scala
		val regEx = """正则表达式""".r
	```

	### 5.6 异常处理
	在scala中异常处理和java一样，使用try...catch异常处理的语法格式：
	``` scala
		try {
			// 代码
		}
		catch {
			case ex:异常类型1 => // 代码
			case ex:异常类型2 => // 代码
		}
		finally {
			// 是不管是否出现异常都会执行的代码
		}
	```
	> **注意：**
	抛出异常：语法格式和Java类似，使用throw new Exception

	### 5.7 泛型 [T]
	scala和java一样，定义位置不一样，类和特质、方法都可以支持泛型。
	在scala中，使用[]方括号来定义类型参数，在Java中使用<>尖括号定义类型参数。
	**1.泛型语法：**
	``` scala
		/**1.定义泛型方法**/
		def 方法名[泛型名称](..) = {
			//...
		}
		/**2.定义泛型类**/
		class 类[T,B](val 变量名1: T,val 变量名2: B)
	```

	**2.泛型上下界：**
	泛型就是参数化类型，和Java的泛型一样，scala的泛型也有上下界，
	上界：[T <: 类型]，类似Java的<T extends 类型>
	下界：[T >: 类型]，类似Java的<T super 类型>
	> **注意：**
	如果类既有上界、又有下界。下界写在前面，上界写在后面

	**3.泛型类型转换(协变、逆变、非变)：**
	**问题：**
	1.带有泛型的类是否可以相互转换？
	2.如何让带有泛型的类支持类型转换呢？

	协变（covariant），如果它保持了子类型序关系≦。该序关系是：子类型≦基类型。
	语法：[+T]，类似Java的 <? extends T>
	逆变（contravariant），如果它逆转了子类型序关系。
	语法：[-T]，类似Java的 <? super T>
	非变（invariant），如果上述两种均不适用，默认。

	### 5.8 Actor 并发编程模型
	Actor 并发编程模型，是scala提供给程序员的一种与Java并发编程完全不一样的并发编程模型，是一种**基于事件模型的并发机制**。
	Actor 并发编程模型是一种不共享数据，依赖消息传递的一种并发编程模式，有效避免资源争夺、死锁等情况。

	**1.Java并发编程的问题：**
	在Java并发编程中，每个对象都有一个逻辑监视器（monitor），可以用来控制对象的多线程访问。
	我们添加sychronized关键字来标记，需要进行同步加锁访问。这样，通过加锁的机制来确保同一时间只有一个线程访问共享数据。
	但这种方式存在资源争夺、以及死锁问题，程序越大问题越麻烦。

	**2.Java并发编程对比Actor并发编程：**

	| Java内置线程模型                                  | scala Actor模型                      |
	| ------------------------------------------------- | ------------------------------------ |
	| "共享数据-锁"模型 (share data and lock)           | share nothing                        |
	| 每个object有一个monitor，监视线程对共享数据的访问 | 不共享数据，Actor之间通过Message通讯 |
	| 加锁代码使用synchronized标识                      | 无                                   |
	| 死锁问题                                          | 无                                   |
	| 每个线程内部是顺序执行的                          | 每个Actor内部是顺序执行的            |

	> 注：scala在2.11.x版本中加入了Akka并发编程框架，老版本已经废弃。Actor的编程模型和Akka很像，我们这里学习Actor的目的是为学习Akka做准备。

	**3.Actor编程案例**
	创建Actor的方式和Java中创建线程很类似。下面是具体的步骤：
	1. 定义class或object继承Actor特质
	2. 重写act方法
	3. 调用Actor的start方法执行Actor
	``` scala
		// 继承Actor特质
		object Actor1 extends Actor {
		  // 实现act方法
		  override def act(): Unit =
			(1 to 10).foreach{
			  num => println(s"线程1: $num")
			}
		}
		
		object Actor2 extends Actor {
		  override def act(): Unit =
			(11 to 20).foreach{
			  num => println(s"线程2: $num")
			}
		}
		
		object ActorDemo {
		  def main(args: Array[String]): Unit = {
			// 调用start启动Actor
			Actor1.start()
			Actor2.start()
		  }
		}
	```
	**4.发送消息/接收消息 **
	Actor是基于事件（消息）的并发编程模型，那么Actor是如何发送消息和接收消息的呢？
	Actor中使用3种方式来发送消息：
	1. ！	发送异步消息，没有返回值          
	2. !?  	发送同步消息，等待返回值          
	3. !!  	发送异步消息，返回值是Future[Any]
	例如给actor1发送一个异步字符串消息：actor1 ! "你好!"

	Actor中使用receive方法来接收消息，需要给receive方法传入1个偏函数。

	``` scala
		// 示例：创建两个Actor，Actor1发送一个异步字符串消息给Actor2，Actor2接收到该消息后，打印出来。
		object ActorSender extends Actor {
		  override def act(): Unit = {
			  // 发送字符串消息给Actor2
			  val msg =  "你好，ActorSender"
			  println(s"ActorSender: 发送消息$msg")
			  ActorReceiver ! msg
		  }
		}

		object ActorReceiver extends Actor {
		  override def act(): Unit =
			// 使用while循环不停地接收消息
			while(true) {
				receive {
				  case msg: String => println(s"接收Actor: 接收到$msg")
				}
			}
		}

		object ActorMsgDemo {
		  def main(args: Array[String]): Unit = {
			ActorSender.start()
			ActorReceiver.start()
		  }
		}

	```

	**5.共享线程**
	上述代码，使用while循环来不断接收消息。但如果当前Actor没有接收到消息，线程就会处于阻塞状态。考虑如果有很多的Actor，
	就有可能会导致很多线程都是处于阻塞状态。这样当有新的消息来时，需要重新创建线程来处理。这样会导致频繁的线程创建、销毁和切换，从而影响运行效率。
	在scala中，可以使用loop + react来复用线程。比while + receive更高效
	示例：使用loop + react重写上述案例

		loop {
			react{
				case msg:String => println(s"接收Actor: 接收到$msg")
			}
		}

	**6.发送和接收自定义消息**
	我们前面发送的消息是字符串类型，Actor中也支持发送自定义消息，常见的如：使用样例类封装消息，然后进行发送处理。



## 6 scala高阶函数与Akka框架

- 理解高阶函数的概念（作为值的函数、匿名函数、闭包、柯里化）
- 掌握隐式转换和隐式参数
- 掌握Akka并发编程框架

	### 6.1 高阶函数（作为值的函数、匿名函数、闭包、柯里化）
	Scala 混合了面向对象和函数式的特性，在函数式编程语言中，函数是“头等公民”，它和Int、String、Class等其他类型处于同等的地位，
	可以像其他任何数据类型一样被传递和操作。
	高阶函数包含：作为值的函数、匿名函数、闭包、柯里化等等。
	**1.作为值的函数**
	将函数作为参数传递给方法
	**2.匿名函数**
	没有赋值给变量的函数就是匿名函数，类似java的lambda表达式
	**3.柯里化**
	柯里化（Currying）：多个参数的方法转换为多个只有一个参数的参数列表的过程。
	使用柯里化，让传递匿名函数作为参数的语法更为简洁
	语法：
	``` scala
		// 柯里化：实现对两个数进行计算
		def calc_carried[A <: AnyVal](x:A, y:A)(func_calc:(A, A)=>A) = {
			func_calc(x, y)
		}
		
		calc_carried(10, 10)(_ + _)
	```
	**3.闭包**
	闭包其实就是一个函数，只不过这个函数的返回值依赖于声明在函数外部的变量。
	闭包：方法或函数中定义函数，这种函数的返回值依赖于声明在函数外部的变量，柯里化就是闭包，类似JavaScript闭包

	``` scala
		// 示例：定义一个闭包
		object ClosureDemo {
		
		  def add(x:Int) = {
			val y = 10
		
			// add返回一个函数，该函数引用了add方法的一个局部变量
			val funcAdd = () => x + y
			funcAdd
		  }
		
		  def main(args: Array[String]): Unit = {
		
			// 调用add方法时，任然可以引用到y的值
			// funcAdd函数就是一个闭包
			println(add(10)())
		  }
		}
	```

	### 6.2 隐式转换和隐式参数
	隐式转换和隐式参数是scala非常有特色的功能，也是Java等其他编程语言没有的功能。我们可以很方便地利用隐式转换来丰富现有类的功能。
	隐式转换：是指以implicit关键字声明的“带有单个参数”的方法。它是自动被调用的，自动将某种类型转换为另外一种类型。
	隐式参数：函数或方法可以带有一个标记为implicit的参数列表。这种情况，编译器会查找缺省值，提供给该方法。
	``` scala
		// 示例1：使用隐式转换，让File具备有read方法
		class RichFile(val f:File) {
		  // 将文件中内容读取成字符串
		  def read() = Source.fromFile(f).mkString
		}

		object MyPredef {
		  // 定义隐式转换方法
		  implicit def file2RichFile(f:File) = new RichFile(f)
		}

		object ImplicitConvertDemo {

		  def main(args: Array[String]): Unit = {
			val f = new File("./data/textfiles/1.txt")
			
			// 导入隐式准换
			import MyPredef.file2RichFile
			// 调用的其实是RichFile的read方法
			println(f.read())
		  }
		}
	```

	### 6.3 Akka并发编程框架
	Akka是一个用于构建高并发、分布式和可扩展的基于事件驱动的应用的工具包。
	Akka是使用scala开发的库，同时可以使用scala和Java语言来开发基于Akka的应用程序。
	Akka中，也是基于Actor来进行编程的。类似于之前学习过的Actor。但是Akka的Actor的编写、创建方法和之前有一些不一样。
	**Akka特性：**
	- 提供基于异步非阻塞、高性能的事件驱动编程模型
	- 内置容错机制，允许Actor在出错时进行恢复或者重置操作
	- 超级轻量级的事件处理（每GB堆内存几百万Actor）
	- 使用Akka可以在单机上构建高并发程序，也可以在网络中构建分布式程序。

	Akka编程重要API：
	① 实现Akka Actor类
	1. 继承Actor（注意：要导入akka.actor包下的Actor）
	2. 实现receive方法，receive方法中直接处理消息即可，不需要添加loop和react方法调用。Akka会自动调用receive来接收消息
	3. 【可选】还可以实现preStart()方法，该方法在Actor对象构建后执行，在Actor声明周期中仅执行一次
	② ActorSystem
	ActorSystem通常是一个单例对象，可以使用这个ActorSystem创建很多Actor。它负责创建和监督actor。Java中类似线程池。
	③ 加载Akka Actor
	调用ActorSystem.actorOf(Props(Actor对象), "Actor名字")来加载Actor
	④ 获取ActorRef
	1. 在actor中，可以使用context上下文对象的actorSelection方法来获取ActorRef
	2. 获取到ActorRef就可以发送消息了
	⑤ Actor中获取ActorSystem
	直接使用context.system就可以获取到管理该Actor的ActorSystem的引用
	⑥ Actor Path
	每一个Actor都有一个Path，就像使用Spring MVC编写一个Controller/Handler一样，这个路径可以被外部引用。

	API简化： Actor、ActorSystem、ActorSystem.actorOf(Props(Actor对象)、Actor Path

	**Akka定时任务scheduler**
	Akka中，提供一个scheduler对象来实现定时调度功能。使用ActorSystem.scheduler.schedule方法，可以启动一个定时任务。











